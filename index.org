#    -*- mode: org -*-
#+REVEAL_ROOT: ./vendor/reveal.js
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1420 reveal_height:800
#+OPTIONS: toc:0
#+OPTIONS: timestamp:nil
#+OPTIONS: reveal_global_footer:t
#+REVEAL_MIN_SCALE: 0.7
#+REVEAL_MAX_SCALE: 3.5
#+REVEAL_HLEVEL: 1
#+REVEAL_TRANS: linear
#+REVEAL_THEME: ./css/slides.css

#+REVEAL_TITLE_SLIDE: <div class="page-title"><h1 id="title" style="width: 900px">Comment éviter des situations cocasses avec un travail d'architecture et de developpement sécurisé</h1><h2>MORVAN Pierre</h2></div>
#+REVEAL_SLIDE_FOOTER: <footer class="copyright">Event BPI</footer>
#+REVEAL_HTML: <link href="css/slides.css" rel="stylesheet">
#+REVEAL_HTML: <title>Comment éviter des situations cocasses avec un travail d'architecture et de developpement sécurisé</title>

#+REVEAL_HTML: <div class="header-tf"><div id="label-container" style="text-align:center"></div></div>
#+REVEAL_HTML: <script src="vendor/tfjs.js"></script>
#+REVEAL_HTML: <script src="vendor/speech-commands.js"></script>
#+REVEAL_HTML: <script src="vendor/tf-backend-wasm.js"></script>
#+REVEAL_HTML: <script src="js/ml.js"></script>

* WHO AM I?
  #+ATTR_HTML: :style border-radius: 50%; margin: auto; display: block;
  [[./assets/pierre_znk.png]]
  #+ATTR_HTML: :style text-align: center
  Pierre Morvan @Zenika Paris
  #+ATTR_HTML: :style text-align: center
  @ryarnyah
  #+ATTR_HTML: :style text-align: center
  "Du Java mais pas que..."
* ENCORE DES MICRO-SERVICES?!?
  #+ATTR_HTML: :style margin: auto; display: block; width: 40%;
  [[./assets/diagram-spring-cloud.svg]]
  #+ATTR_HTML: :style margin: auto; display: block; width: 40%;
  [[./assets/ingress-k8s.png]]
  #+BEGIN_NOTES
  Lors de ma courte carrière, j'ai rencontré pas mal de failles de sécurité et jamais plus que dernièrement avec l'arrivé des architectures micro-services et du cloud et de leur vision "forteresse" de l'infrastructure.
  Tout le monde pense que tout est sécurisé by design, faute au marketing...
  Que ce soit dans les exemple ci-dessus avec Spring ou Kubernetes, l'architecture de base est la meme. Un pool de services accèssibles uniquement via une gateway (on avait la meme archi avant avec des LB...).
  Mais autant on savait faire avant avec une architecture similaire autant maintenant... c'est discutable.
  #+END_NOTES
** SSRF OU COMMENT OUVRIR LA PORTE DE SON SI
   SSR... Quoi?
   #+ATTR_REVEAL: :frag (appear)
   #+ATTR_HTML: :style margin: auto; display: block; width: 80%;
   [[./assets/example-ssrf.svg]]
** SSRF
   #+ATTR_HTML: :style margin: auto; display: block; width: 90%;
   [[./assets/ssrf-xxe.png]]
   #+BEGIN_NOTES
   Cette histoire commence li ya a quelques temps. ce jour la un individu se dit que ça serai une bonne idée de rajouter Sonar au projet.
   Il le rajoute et PAN c'est la déferlante! Et dans ce fatra d'annomalies il découvre des annomalies qui lui font froncer les sourcils?!?
   XMLInputFactory & TransformerFactory & ...
   En testant il se rend compte que depuis son navigateur il est en capacité de faire des requetes depuis le serveur et donc accèder aux resources exposés sur le 127.0.0.1.
   Manque de bol, dans ces resources, on va retrouver une api exposant la configuration de l'application...
   #+END_NOTES
** SSRF: COMMENT S'EN SORTIR?
   #+ATTR_HTML: :class questions
   [[./assets/Questions-pana.svg]]
   #+BEGIN_NOTES
   Alors comment faire pour ne pas avoir ce genre de soucis?
   Un WAF peu en effet diminuer la surface d'attaque mais le plus efficace reste juste de rajouter un peu d'analyse statique lors des developpements pour les XXE.
   Après rien ne vaut une relecture humaine et une formation des equipes aux risques (une SSRF pouvant être une fonctionnalité voulue de l'application).
   #+END_NOTES
** MON SERVICE S'EST FAIT ATTAQUE!
   #+ATTR_HTML: :style margin: auto; display: block; width: 80%;
   [[./assets/service-mesh.svg]]
   #+BEGIN_NOTES
   Mais la SSRF est loin d'etre le seul risque. Immaginous que vous avez un service qui est vulnerable et que l'attaquant arive a ouvrir une console sur celui-ci.
   Que peut-on faire pour limiter la casse? Et oui tout cassera, tout sera un jour attaqué, tel est une façon de voir les choses.
   #+END_NOTES
** TLS? POURQUOI?
   * Limiter les interception réseau
     * Récupération de secrets (LDAP, accès DB, ...)
     * Réécriture des réponses
     * ...
   * ARP spoofing
   * ...
   #+BEGIN_NOTES
   tout flux doit être chiffré.
   Ne pas oublier de gérer des CRLs ou un répondeur OCSP
   #+END_NOTES
** Limiter au maximum les droits d'un process
   * Containers (SystemD sait aussi faire des containers!)
   * Capabilities
   * Users unix
   * ...
** N'OUBLIONS PAS LE DNS
   * Ordre de résolution du DNS
   * DNS de fallback
** Et ce n'est qu'un apperçu...
   #+ATTR_HTML: :style margin: auto; display: block; width: 50%;
   [[./assets/Programming-pana.svg]]
* DEPENDENCY HELL
  #+ATTR_HTML: :style margin: auto; display: block; width: 95%;
  [[./assets/dep-hell.svg]]
  #+BEGIN_NOTES
  Story telling:
  Je vais vous raconter une histoire.
  Qui n'a jamais eu de dépendances en double dans son projet?
  Qui n'a jamais eu de ClassCastException ou de MethodNotFoundException?
  
  Le module analysé c'est quarkus-neo4j au milleu.
  #+END_NOTES
** DEPENDENCY HELL
  #+ATTR_HTML: :style margin: auto; display: block; width: 70%;
  [[./assets/quarkus-extensions.png]]
  #+BEGIN_NOTES
  Framework mis en avant pour l'écriture de nouveaux modules.
  #+END_NOTES
** DEPENDENCY HELL: COMMENT S'EN SORTIR?
   #+ATTR_HTML: :class questions
  [[./assets/Questions-pana.svg]]
** DEPENDENCY HELL: DES OUTILS EN JAVA
   #+ATTR_REVEAL: :frag (appear)
   * Des incontournables avec maven incontournables
     * Maven Enforcer Plugin
     * Maven Dependency Check
   * Des scans réguliers
   * Mais c'est aussi une éducation des équipe
   #+BEGIN_NOTES
   Rajouter une dépendance c'est aussi rajouter ses dépendances.
   #+END_NOTES
* UNE PETITE HISTOIRE DE CFT...
  #+ATTR_REVEAL: :frag (appear)
  [[./assets/cft.png]]
  #+ATTR_REVEAL: :frag (appear)
  #+ATTR_HTML: :style margin: auto; display: block; width: 30%;
  [[./assets/ghidra.png]]
  #+BEGIN_NOTES
  C'est l'histoire d'un produit maison qui servait a faire de l'échange de fichier.
  Celui-ci permettait de remplacer son ancetre CFT.
  Il devait tout révolutionner.
  Il était déployé de partout! (et depuis un certain temps)
  Malheureusement celui-ci avait de graves érreurs de conception.
  Et un jour un developpeur a eu besoin d'en comprendre le fonctionnement et a grand coup de Ghidra il a fouillé et a trouvé beaucoup de choses...
  Il implémentait son propre chiffrement (au diable AES)
  Il exposait un serveur HTTP.
  Il était écrit en C à la mode shell.
  Il tournait avec des droits forts.
  #+END_NOTES
** GIDRA
   #+ATTR_HTML: :style margin: auto; display: block; width: 80%;
   [[./assets/ghidra-ihm.png]]
* ALORS COMMENT NE PAS EN ARRIVER LA?
  #+ATTR_REVEAL: :frag (appear)
  * Former les équipes de developpement et les architectes.
  * Mettre en place de bonnes pratiques de developpement.
  * Intégrer la sécurité dans le processus de developpement.
  * Penser à la sécurité "in-depth" dés la conception de l'architecture.
  * Prendre du recul et toujours remettre en question les choix techniques sur toutes les phases d'un projet.
  * Ne pas hésiter à chalenger un besoin métier si la sécurité est en jeu!
  * Ne pas réinventer la roue!
** LES OUTILS MAISON
  #+ATTR_REVEAL: :frag (appear)
  * Oui mais pas sans faire attention!
  * Oui mais en réutilisant des élements existants
  * Oui mais en connaissant le langage utilisé
  * Oui mais en réalisant des audit du code réugliers de façon automatisé mais aussi humaine
  * Oui mais uniquement si rien d'autre ne fait l'affaire!
  #+BEGIN_NOTES
  Ne pas hésiter a investir l'équipe ou les équipes a coté de soit pour s'auto-auditer
  #+END_NOTES
* MERCI
   #+ATTR_HTML: :class questions
  [[./assets/Questions-pana.svg]]
